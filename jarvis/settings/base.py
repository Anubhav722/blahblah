"""
Django settings for jarvis project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import sys
import warnings
# Normally you should not import anything from django directly in your settings
# ImproperlyConfigured is an exception
from django.core.exceptions import ImproperlyConfigured


def get_env_variable(var_name):
    """
    Get an environment variable or raise exception
    """
    try:
        return os.environ[var_name]
    except KeyError:
        error_msg = "Set the {} environment variable".format(var_name)
        raise ImproperlyConfigured(error_msg)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_ROOT = BASE_DIR + '/static/'
SKILLS_INDEX = os.path.dirname(BASE_DIR) + '/jarvis/skill/skills.index'

TESTDATA_DIRS = os.path.dirname(BASE_DIR) + '/testdata/'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR + '/media/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!+6gg%(yt(#mxj&5rtv%%&k4*t33w%(6=1&^k%n($r&#(z(*44'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Backend User
INTERNAL_RESUME_PARSER_USER = 'psycho_backend'

# Other Repositories Path
RESUME_TRANSDUCER_PATH = get_env_variable("RESUME_TRANSDUCER_PATH")
GATEFILES_PATH = get_env_variable("GATEFILES_PATH")
STANFORD_MODELS_PATH = get_env_variable("STANFORD_MODELS_PATH")
STANFORD_NER_JAR_PATH = get_env_variable("STANFORD_NER_JAR_PATH")

ALLOWED_HOSTS = ['parser.psycho.in', 'parser.psycho.com', '52.76.61.47']

PREREQ_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'corsheaders',
]

PROJECT_APPS = [
    'jarvis.accounts',
    'jarvis.core',
    'jarvis.resume',
    'storages',
    'django_filters',
    'django_extensions',
]

INSTALLED_APPS = PREREQ_APPS + PROJECT_APPS

MIDDLEWARE_CLASSES = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
    # 'django.middleware.common.CommonMiddleware',

]

ROOT_URLCONF = 'jarvis.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            "/resume/templates/",
            "/jarvis/templates/"
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'jarvis.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR + '/static/'

# Django corsheaders app config
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'dnt',
    'authorization',
    'x-csrftoken',
    'cache-control',
    'accept-encoding',
    'aircto-client-key',
    'aircto-client-secret',
    'access-control-allow-headers',
    'access-control-allow-origin',
)

# GitHub Login
GITHUB_CLIENT_ID = get_env_variable('GITHUB_CLIENT_ID')
GITHUB_CLIENT_SECRET = get_env_variable('GITHUB_CLIENT_SECRET')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'jarvis.resume.api.renderers.NoHTMLFormBrowsableAPIRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}

# Turning DateTime Naive object warning into exceptions
warnings.filterwarnings(
    'error', r"DateTimeField .* received a naive datetime",
    RuntimeWarning, r'django\.db\.models\.fields',
)

# Cache Backend
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'api-throttling',
    }
}

UPLOAD_TO_S3 = False

DOMAIN = "https://parser.psycho.com"
AIRCTO_BACKEND_CALLBACK_RESUME_URL = get_env_variable('PSYCHO_BACKEND_CALLBACK_RESUME_URL')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
        },
    },
    'loggers': {
        '': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        }
    },
}
